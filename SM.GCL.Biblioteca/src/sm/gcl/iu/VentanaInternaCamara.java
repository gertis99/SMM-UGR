
package sm.gcl.iu;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.image.BufferedImage;

/**
 * Clase creada para la gestión de ventanas internas que involucren a la webcam.
 * Hereda de VentanaInternaSM
 * @author Germán Castilla López
 */
public class VentanaInternaCamara extends VentanaInternaSM {

    /**
     * Webcam usada en la ventana interna
     */
    private Webcam camara = Webcam.getDefault();
    
    /**
     * Resoluciones disponibles de la camara usada
     */
    private Dimension[] dimensiones = camara.getViewSizes();
    
    /**
     * Booleano usado en el bucle de resoluciones
     */
    private boolean salir = false;
    
    
    /**
     * Constructor de la clase. 
     * Se aplica la imagen de la webcam al JInternalFrame
     * @param c Webcam de la que se tomará la imagen
     * @param res Resolución con la que abrir la cámara
     */
    private VentanaInternaCamara(Webcam c, int res) {
        initComponents();
        camara = c;
        for (int i = 0; i < dimensiones.length && !salir; i++) {
            if (i == res) {
                camara.setViewSize(dimensiones[i]);
                salir = true;
            }
        }
        if (camara != null) {
            WebcamPanel areaVisual = new WebcamPanel(camara);
            if (areaVisual != null) {
                getContentPane().add(areaVisual, BorderLayout.CENTER);
                pack();
            }
        }
    }
    
    /**
     * Método usado para llamar a la clase a la hora de crear una nueva
     * ventana interna de tipo camára
     * @param c Webcam de la que se tomará la imagen
     * @param resolucion Resolución con la que abrir la cámara
     * @return La ventana interna
     */
    public static VentanaInternaCamara getInstance(Webcam c, int resolucion) {
        VentanaInternaCamara v = new VentanaInternaCamara(c, resolucion);
        return (v.camara != null ? v : null);
    }
    
    /**
     * Método usado para tomar capturas de la imagen de la webcam
     * @return Una imagen capturada por la cámara
     */
    @Override
    public BufferedImage getImage(){
        return camara!=null ? camara.getImage() : null;
    }

    /**
     * Método para comprobar la cámara usada en la ventana interna
     * @return la cámara usada en la ventana interna
     */
    public Webcam getCamara() {
        return camara;
    }

    /**
     * Método para indicar la cámara que se debe usar en la ventana interna
     * @param camara la cámara que debe ser usada en la ventana interna
     */
    public void setCamara(Webcam camara) {
        this.camara = camara;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
