
package sm.gcl.iu;

import java.awt.image.BufferedImage;
import java.io.File;
import uk.co.caprica.vlcj.component.EmbeddedMediaPlayerComponent;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;

/**
 * Clase usada para la gestión de ventanas internas en las que se puede
 * reproducir un vídeo.
 * @author Germán Castilla López
 */
public class VentanaInternaVideo extends VentanaInternaSM {
    
    /**
     * Reproductor del vídeo
     */
    private EmbeddedMediaPlayer vlcplayer = null;
    
    /**
     * Archivo de vídeo de la ventana interna
     */
    private File fMedia;

    /**
     * Constructor de la clase que llama al initcomponents y
     * asigna el vídeo a la ventana intera e incializa el reproductor
     * @param f El archivo de vídeo que debe contener la ventana interna
     */
    public VentanaInternaVideo(File f) {
        initComponents();
        fMedia = f;
        EmbeddedMediaPlayerComponent aVisual = new EmbeddedMediaPlayerComponent();
        getContentPane().add(aVisual, java.awt.BorderLayout.CENTER);
        vlcplayer = aVisual.getMediaPlayer();
    }
    
    /**
     * Método usado para llamar a la clase a la hora de crear una nueva
     * ventana interna de tipo vídeo
     * @param f El archivo de vídeo que debe contener la ventana interna
     * @return La ventana interna
     */
    public static VentanaInternaVideo getInstance(File f) {
        VentanaInternaVideo v = new VentanaInternaVideo(f);
        return (v.vlcplayer != null ? v : null);
    }

    /**
     * Método usado para comenzar la reproducción del vídeo alojado
     * en la ventana interna.
     */
    public void play() {
        if (vlcplayer != null) {
            if (vlcplayer.isPlayable()) {
                vlcplayer.play();
            } else {
                vlcplayer.playMedia(fMedia.getAbsolutePath());
            }
        }
    }

    /**
     * Método usado para pausar y parar la reproducción del vídeo alojado
     * en la ventana interna.
     * Si el vídeo está siendo reproducido, lo pausa, si ya está pausado, lo detiene
     * y vuelve al principio.
     */
    public void stop() {
        if (vlcplayer != null) {
            if (vlcplayer.isPlaying()) {
                vlcplayer.pause();
            } else {
                vlcplayer.stop();
            }
        }
    }
    
    /**
     * Método usado para tomar una captura de la imagen que esté mostrando el vídeo
     * @return la imagen que esté mostrando el vídeo
     */
    @Override
    public BufferedImage getImage(){
        return vlcplayer!=null ? vlcplayer.getSnapshot() : null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        setBounds(0, 0, 400, 300);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
