
package practicafinalsmm;

import sm.gcl.iu.ColorCelRender;
import sm.gcl.imagen.PosterizarOp;
import sm.gcl.imagen.RedOp;
import sm.gcl.imagen.ResaltadoSombrasOp;
import sm.gcl.graficos.Formas;
import sm.gcl.iu.VentanaInternaCamara;
import sm.gcl.iu.VentanaInternaImagen;
import sm.gcl.iu.VentanaInternaSM;
import sm.gcl.iu.VentanaInternaVideo;
import java.awt.Color;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import sm.image.EqualizationOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.SepiaOp;
import sm.image.TintOp;
import sm.sound.SMClipPlayer;
import sm.sound.SMSoundRecorder;
import com.github.sarxos.webcam.Webcam;
import java.awt.Dimension;
import java.awt.image.BandCombineOp;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.gcl.imagen.FuncionPropia;

/**
 *
 * @author USUARIO
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    
    
    private SMClipPlayer player = null;
    private SMSoundRecorder recorder = null;
    private Formas forma = Formas.LINEA;
    private ManejadorVentanaInterna manejador;
    private float transparencia;
    private BufferedImage imgFuente = null;
    private float tintado = 0.5f;
    private boolean procesamiento;
    private List<Webcam> camaras = Webcam.getWebcams();
    private Webcam camara = null;
    private Dimension[] dis = null;
    private Color colorTrazo = Color.BLACK;
    private Color colorRelleno = Color.BLACK;
    private int valorCuadratico = 128;
    private int umbralRedOp = 30;
    

    /**
     * Constructor que crea la ventana principal.
     */
    public VentanaPrincipal() {
        initComponents();
        manejador = new ManejadorVentanaInterna();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        panelArriba = new javax.swing.JPanel();
        barraHerramientasArriba = new javax.swing.JToolBar();
        botonNuevo = new javax.swing.JButton();
        botonAbrir = new javax.swing.JButton();
        botonGuardar = new javax.swing.JButton();
        botonLinea = new javax.swing.JToggleButton();
        botonRectangulo = new javax.swing.JToggleButton();
        botonRectanguloRedondeado = new javax.swing.JToggleButton();
        botonElipse = new javax.swing.JToggleButton();
        sliderTransparencia = new javax.swing.JSlider();
        botonDiscontinuo = new javax.swing.JCheckBox();
        botonEditar = new javax.swing.JToggleButton();
        Color coloresArrayTrazo[] = {Color.BLACK, Color.red, Color.blue, Color.white, Color.yellow, Color.green};
        comboColoresTrazo = new javax.swing.JComboBox<>(coloresArrayTrazo);
        botonDialogoColorTrazo = new javax.swing.JButton();
        Color coloresArray[] = {Color.BLACK, Color.red, Color.blue, Color.white, Color.yellow, Color.green};
        comboColoresRelleno = new javax.swing.JComboBox<>(coloresArray);
        botonDialogoColorRelleno = new javax.swing.JButton();
        botonGrosor = new javax.swing.JSpinner();
        botonRelleno = new javax.swing.JToggleButton();
        botonDegradado = new javax.swing.JToggleButton();
        botonDegradadoHorizontal = new javax.swing.JToggleButton();
        botonDegradadoEsquina = new javax.swing.JToggleButton();
        botonAlisar = new javax.swing.JToggleButton();
        barraHerramientasSV = new javax.swing.JToolBar();
        botonPlay = new javax.swing.JButton();
        botonStop = new javax.swing.JButton();
        comboAudios = new javax.swing.JComboBox<>();
        botonCamara = new javax.swing.JButton();
        comboCamaras = new javax.swing.JComboBox<>();
        comboResoluciones = new javax.swing.JComboBox<>();
        botonCapturar = new javax.swing.JButton();
        botonGrabar = new javax.swing.JButton();
        panelAbajo = new javax.swing.JPanel();
        panelHerramientasAbajo = new javax.swing.JPanel();
        barraHerramientasAbajo = new javax.swing.JToolBar();
        panelBotones = new javax.swing.JPanel();
        botonDuplicar = new javax.swing.JButton();
        botonNegativo = new javax.swing.JButton();
        botonProcesar = new javax.swing.JToggleButton();
        sliderBrillo = new javax.swing.JSlider();
        panelContraste = new javax.swing.JPanel();
        botonContrasteNormal = new javax.swing.JButton();
        botonContrasteIluminado = new javax.swing.JButton();
        botonContrasteOscurecido = new javax.swing.JButton();
        panelEscala = new javax.swing.JPanel();
        botonAumentarEscala = new javax.swing.JButton();
        botonDisminuirEscala = new javax.swing.JButton();
        panelFiltros = new javax.swing.JPanel();
        comboMascara = new javax.swing.JComboBox<>();
        panelRotar = new javax.swing.JPanel();
        sliderRotacion = new javax.swing.JSlider();
        boton90Grados = new javax.swing.JButton();
        boton180Grados = new javax.swing.JButton();
        boton270Grados = new javax.swing.JButton();
        panelColor = new javax.swing.JPanel();
        comboColor = new javax.swing.JComboBox<>();
        botonBandas = new javax.swing.JButton();
        botonCombinar = new javax.swing.JButton();
        panelTintado = new javax.swing.JPanel();
        botonTintar = new javax.swing.JButton();
        sliderTintado = new javax.swing.JSlider();
        jPanel4 = new javax.swing.JPanel();
        botonSepia = new javax.swing.JButton();
        botonEcualizar = new javax.swing.JButton();
        botonCuadratico = new javax.swing.JButton();
        sliderCuadratico = new javax.swing.JSlider();
        botonRojo = new javax.swing.JButton();
        botonPixelPropio = new javax.swing.JButton();
        botonSemiNegatividad = new javax.swing.JButton();
        botonResaltadoSombras = new javax.swing.JButton();
        sliderPosterizar = new javax.swing.JSlider();
        sliderRedOp = new javax.swing.JSlider();
        leyenda = new javax.swing.JLabel();
        escritorio = new javax.swing.JDesktopPane();
        barraMenu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuNuevo = new javax.swing.JMenuItem();
        menuAbrir = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        menuVer = new javax.swing.JMenu();
        menuVerLeyenda = new javax.swing.JMenuItem();
        menuVerBarraArriba = new javax.swing.JMenuItem();
        menuVerBarraAbajo = new javax.swing.JMenuItem();
        menuAyuda = new javax.swing.JMenu();
        menuAcercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelArriba.setLayout(new java.awt.BorderLayout());

        barraHerramientasArriba.setRollover(true);

        botonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        botonNuevo.setToolTipText("Nuevo");
        botonNuevo.setFocusable(false);
        botonNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(botonNuevo);

        botonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        botonAbrir.setToolTipText("Abrir");
        botonAbrir.setFocusable(false);
        botonAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(botonAbrir);

        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        botonGuardar.setToolTipText("Guardar");
        botonGuardar.setFocusable(false);
        botonGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(botonGuardar);

        buttonGroup1.add(botonLinea);
        botonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        botonLinea.setToolTipText("Linea");
        botonLinea.setFocusable(false);
        botonLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLineaActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(botonLinea);

        buttonGroup1.add(botonRectangulo);
        botonRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        botonRectangulo.setToolTipText("Rectángulo");
        botonRectangulo.setFocusable(false);
        botonRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRectanguloActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(botonRectangulo);

        buttonGroup1.add(botonRectanguloRedondeado);
        botonRectanguloRedondeado.setText("Redondeado");
        botonRectanguloRedondeado.setToolTipText("Rectángulo redondeado");
        botonRectanguloRedondeado.setFocusable(false);
        botonRectanguloRedondeado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRectanguloRedondeado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRectanguloRedondeado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRectanguloRedondeadoActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(botonRectanguloRedondeado);

        buttonGroup1.add(botonElipse);
        botonElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        botonElipse.setToolTipText("Elipse");
        botonElipse.setFocusable(false);
        botonElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonElipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonElipseActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(botonElipse);

        sliderTransparencia.setMajorTickSpacing(25);
        sliderTransparencia.setToolTipText("Transparencia");
        sliderTransparencia.setValue(100);
        sliderTransparencia.setPreferredSize(new java.awt.Dimension(100, 26));
        sliderTransparencia.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderTransparenciaStateChanged(evt);
            }
        });
        sliderTransparencia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderTransparenciaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderTransparenciaFocusLost(evt);
            }
        });
        barraHerramientasArriba.add(sliderTransparencia);

        botonDiscontinuo.setText("Discontinuo");
        botonDiscontinuo.setToolTipText("Discontinuo");
        botonDiscontinuo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDiscontinuoActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(botonDiscontinuo);

        botonEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        botonEditar.setToolTipText("Editar");
        botonEditar.setFocusable(false);
        botonEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonEditar.setPreferredSize(new java.awt.Dimension(30, 30));
        botonEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(botonEditar);

        comboColoresTrazo.setToolTipText("Color trazo");
        comboColoresTrazo.setMaximumSize(new java.awt.Dimension(30, 30));
        comboColoresTrazo.setRenderer(new ColorCelRender());
        comboColoresTrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboColoresTrazoActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(comboColoresTrazo);

        botonDialogoColorTrazo.setText("Color trazo");
        botonDialogoColorTrazo.setToolTipText("Color trazo");
        botonDialogoColorTrazo.setFocusable(false);
        botonDialogoColorTrazo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDialogoColorTrazo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDialogoColorTrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDialogoColorTrazoActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(botonDialogoColorTrazo);

        comboColoresRelleno.setToolTipText("Color relleno");
        comboColoresRelleno.setMaximumSize(new java.awt.Dimension(30, 30));
        comboColoresRelleno.setRenderer(new ColorCelRender());
        comboColoresRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboColoresRellenoActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(comboColoresRelleno);

        botonDialogoColorRelleno.setText("Color relleno");
        botonDialogoColorRelleno.setToolTipText("Color relleno");
        botonDialogoColorRelleno.setFocusable(false);
        botonDialogoColorRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDialogoColorRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDialogoColorRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDialogoColorRellenoActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(botonDialogoColorRelleno);

        botonGrosor.setToolTipText("Grosor");
        botonGrosor.setAutoscrolls(true);
        botonGrosor.setPreferredSize(new java.awt.Dimension(50, 30));
        botonGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                botonGrosorStateChanged(evt);
            }
        });
        barraHerramientasArriba.add(botonGrosor);

        botonRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        botonRelleno.setToolTipText("Relleno");
        botonRelleno.setFocusable(false);
        botonRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRelleno.setPreferredSize(new java.awt.Dimension(30, 30));
        botonRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRellenoActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(botonRelleno);

        botonDegradado.setText("Degradado");
        botonDegradado.setToolTipText("Relleno degradado");
        botonDegradado.setFocusable(false);
        botonDegradado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDegradado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDegradado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDegradadoActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(botonDegradado);

        botonDegradadoHorizontal.setText("Horizontal");
        botonDegradadoHorizontal.setToolTipText("Degradado horizontal");
        botonDegradadoHorizontal.setFocusable(false);
        botonDegradadoHorizontal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDegradadoHorizontal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDegradadoHorizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDegradadoHorizontalActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(botonDegradadoHorizontal);

        botonDegradadoEsquina.setText("Esquina");
        botonDegradadoEsquina.setToolTipText("Degradado esquina a esquina");
        botonDegradadoEsquina.setFocusable(false);
        botonDegradadoEsquina.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDegradadoEsquina.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDegradadoEsquina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDegradadoEsquinaActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(botonDegradadoEsquina);

        botonAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        botonAlisar.setToolTipText("Alisar");
        botonAlisar.setFocusable(false);
        botonAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAlisar.setPreferredSize(new java.awt.Dimension(30, 30));
        botonAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAlisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAlisarActionPerformed(evt);
            }
        });
        barraHerramientasArriba.add(botonAlisar);

        panelArriba.add(barraHerramientasArriba, java.awt.BorderLayout.WEST);

        barraHerramientasSV.setRollover(true);

        botonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/play24x24.png"))); // NOI18N
        botonPlay.setToolTipText("Play");
        botonPlay.setFocusable(false);
        botonPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPlayActionPerformed(evt);
            }
        });
        barraHerramientasSV.add(botonPlay);

        botonStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stop24x24.png"))); // NOI18N
        botonStop.setToolTipText("Stop");
        botonStop.setFocusable(false);
        botonStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonStopActionPerformed(evt);
            }
        });
        barraHerramientasSV.add(botonStop);

        comboAudios.setToolTipText("Audios");
        barraHerramientasSV.add(comboAudios);

        botonCamara.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Camara.png"))); // NOI18N
        botonCamara.setToolTipText("Webcam");
        botonCamara.setFocusable(false);
        botonCamara.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCamara.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCamara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCamaraActionPerformed(evt);
            }
        });
        barraHerramientasSV.add(botonCamara);

        comboCamaras.setToolTipText("Webcams");
        comboCamaras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCamarasActionPerformed(evt);
            }
        });
        for(int i = 0; i < camaras.size(); i++)
        comboCamaras.addItem(camaras.get(i));
        barraHerramientasSV.add(comboCamaras);

        comboResoluciones.setToolTipText("Resolución");
        dis = ((Webcam)(comboCamaras.getSelectedItem())).getViewSizes();
        String res = "";
        for(int i=0; i<dis.length; i++){
            res = dis[i].getWidth() + "x" + dis[i].getHeight();
            comboResoluciones.addItem(res);
        }
        comboResoluciones.setSelectedIndex(dis.length-1);
        barraHerramientasSV.add(comboResoluciones);

        botonCapturar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Capturar.png"))); // NOI18N
        botonCapturar.setToolTipText("Capturar imagen");
        botonCapturar.setFocusable(false);
        botonCapturar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCapturar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCapturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCapturarActionPerformed(evt);
            }
        });
        barraHerramientasSV.add(botonCapturar);

        botonGrabar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/record24x24.png"))); // NOI18N
        botonGrabar.setToolTipText("Grabar");
        botonGrabar.setFocusable(false);
        botonGrabar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGrabar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGrabarActionPerformed(evt);
            }
        });
        barraHerramientasSV.add(botonGrabar);

        panelArriba.add(barraHerramientasSV, java.awt.BorderLayout.EAST);

        getContentPane().add(panelArriba, java.awt.BorderLayout.PAGE_START);

        panelAbajo.setLayout(new java.awt.BorderLayout());

        panelHerramientasAbajo.setLayout(new java.awt.BorderLayout());

        barraHerramientasAbajo.setRollover(true);

        panelBotones.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelBotones.setPreferredSize(new java.awt.Dimension(350, 27));
        panelBotones.setLayout(new java.awt.GridBagLayout());

        botonDuplicar.setText("Duplicar");
        botonDuplicar.setToolTipText("Duplicar");
        botonDuplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDuplicarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        panelBotones.add(botonDuplicar, gridBagConstraints);

        botonNegativo.setText("Negativo");
        botonNegativo.setToolTipText("Negativo");
        botonNegativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNegativoActionPerformed(evt);
            }
        });
        panelBotones.add(botonNegativo, new java.awt.GridBagConstraints());

        botonProcesar.setText("Procesamiento completo");
        botonProcesar.setToolTipText("Procesamiento completo");
        botonProcesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonProcesarActionPerformed(evt);
            }
        });
        panelBotones.add(botonProcesar, new java.awt.GridBagConstraints());

        barraHerramientasAbajo.add(panelBotones);

        sliderBrillo.setMaximum(255);
        sliderBrillo.setMinimum(-255);
        sliderBrillo.setToolTipText("Brillo");
        sliderBrillo.setValue(0);
        sliderBrillo.setPreferredSize(new java.awt.Dimension(100, 26));
        sliderBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderBrilloStateChanged(evt);
            }
        });
        sliderBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusLost(evt);
            }
        });
        barraHerramientasAbajo.add(sliderBrillo);

        panelContraste.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelContraste.setLayout(new java.awt.GridLayout(1, 0));

        botonContrasteNormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        botonContrasteNormal.setToolTipText("Contraste normal");
        botonContrasteNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrasteNormalActionPerformed(evt);
            }
        });
        panelContraste.add(botonContrasteNormal);

        botonContrasteIluminado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        botonContrasteIluminado.setToolTipText("Contraste iluminado");
        botonContrasteIluminado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrasteIluminadoActionPerformed(evt);
            }
        });
        panelContraste.add(botonContrasteIluminado);

        botonContrasteOscurecido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        botonContrasteOscurecido.setToolTipText("Contraste oscurecido");
        botonContrasteOscurecido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrasteOscurecidoActionPerformed(evt);
            }
        });
        panelContraste.add(botonContrasteOscurecido);

        barraHerramientasAbajo.add(panelContraste);

        panelEscala.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelEscala.setLayout(new java.awt.GridLayout(1, 0));

        botonAumentarEscala.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        botonAumentarEscala.setToolTipText("Aumentar escala");
        botonAumentarEscala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAumentarEscalaActionPerformed(evt);
            }
        });
        panelEscala.add(botonAumentarEscala);

        botonDisminuirEscala.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        botonDisminuirEscala.setToolTipText("Reducir escala");
        botonDisminuirEscala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDisminuirEscalaActionPerformed(evt);
            }
        });
        panelEscala.add(botonDisminuirEscala);

        barraHerramientasAbajo.add(panelEscala);

        panelFiltros.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelFiltros.setLayout(new java.awt.GridLayout(1, 0));

        comboMascara.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Fronteras" }));
        comboMascara.setToolTipText("Filtros");
        comboMascara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboMascaraActionPerformed(evt);
            }
        });
        panelFiltros.add(comboMascara);

        barraHerramientasAbajo.add(panelFiltros);

        panelRotar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelRotar.setPreferredSize(new java.awt.Dimension(250, 35));
        panelRotar.setLayout(new java.awt.GridLayout(1, 0));

        sliderRotacion.setMaximum(360);
        sliderRotacion.setMinorTickSpacing(90);
        sliderRotacion.setPaintTicks(true);
        sliderRotacion.setToolTipText("Rotación");
        sliderRotacion.setValue(0);
        sliderRotacion.setPreferredSize(new java.awt.Dimension(100, 31));
        sliderRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRotacionStateChanged(evt);
            }
        });
        sliderRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusLost(evt);
            }
        });
        panelRotar.add(sliderRotacion);

        boton90Grados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion90.png"))); // NOI18N
        boton90Grados.setToolTipText("Girar 90º");
        boton90Grados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton90GradosActionPerformed(evt);
            }
        });
        panelRotar.add(boton90Grados);

        boton180Grados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        boton180Grados.setToolTipText("Girar 180º");
        boton180Grados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton180GradosActionPerformed(evt);
            }
        });
        panelRotar.add(boton180Grados);

        boton270Grados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion270.png"))); // NOI18N
        boton270Grados.setToolTipText("Girar 270º");
        boton270Grados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton270GradosActionPerformed(evt);
            }
        });
        panelRotar.add(boton270Grados);

        barraHerramientasAbajo.add(panelRotar);

        panelColor.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelColor.setLayout(new java.awt.GridLayout(1, 0));

        comboColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "sRGB", "YCC", "Grey" }));
        comboColor.setToolTipText("Bandas");
        comboColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboColorActionPerformed(evt);
            }
        });
        panelColor.add(comboColor);

        botonBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/bandas.png"))); // NOI18N
        botonBandas.setToolTipText("Extracción de bandas");
        botonBandas.setMaximumSize(new java.awt.Dimension(49, 25));
        botonBandas.setMinimumSize(new java.awt.Dimension(49, 25));
        botonBandas.setPreferredSize(new java.awt.Dimension(49, 25));
        botonBandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBandasActionPerformed(evt);
            }
        });
        panelColor.add(botonBandas);

        botonCombinar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/combinar.png"))); // NOI18N
        botonCombinar.setToolTipText("Enverdecer la imagen");
        botonCombinar.setPreferredSize(new java.awt.Dimension(35, 25));
        botonCombinar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCombinarActionPerformed(evt);
            }
        });
        panelColor.add(botonCombinar);

        barraHerramientasAbajo.add(panelColor);

        panelTintado.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelTintado.setLayout(new java.awt.GridLayout(1, 0));

        botonTintar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/tintar.png"))); // NOI18N
        botonTintar.setToolTipText("Tintado");
        botonTintar.setMaximumSize(new java.awt.Dimension(49, 25));
        botonTintar.setPreferredSize(new java.awt.Dimension(35, 25));
        botonTintar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTintarActionPerformed(evt);
            }
        });
        panelTintado.add(botonTintar);

        sliderTintado.setToolTipText("Valor tintado");
        sliderTintado.setPreferredSize(new java.awt.Dimension(100, 26));
        sliderTintado.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderTintadoStateChanged(evt);
            }
        });
        panelTintado.add(sliderTintado);

        barraHerramientasAbajo.add(panelTintado);

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.setPreferredSize(new java.awt.Dimension(500, 75));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        botonSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sepia.png"))); // NOI18N
        botonSepia.setToolTipText("Sepia");
        botonSepia.setMaximumSize(new java.awt.Dimension(30, 25));
        botonSepia.setMinimumSize(new java.awt.Dimension(49, 25));
        botonSepia.setPreferredSize(new java.awt.Dimension(30, 25));
        botonSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSepiaActionPerformed(evt);
            }
        });
        jPanel4.add(botonSepia, new java.awt.GridBagConstraints());

        botonEcualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/ecualizar.png"))); // NOI18N
        botonEcualizar.setToolTipText("Ecualización");
        botonEcualizar.setMaximumSize(new java.awt.Dimension(49, 25));
        botonEcualizar.setMinimumSize(new java.awt.Dimension(49, 25));
        botonEcualizar.setPreferredSize(new java.awt.Dimension(49, 25));
        botonEcualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEcualizarActionPerformed(evt);
            }
        });
        jPanel4.add(botonEcualizar, new java.awt.GridBagConstraints());

        botonCuadratico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cuadratica.png"))); // NOI18N
        botonCuadratico.setToolTipText("Cuadrático");
        botonCuadratico.setPreferredSize(new java.awt.Dimension(45, 25));
        botonCuadratico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCuadraticoActionPerformed(evt);
            }
        });
        jPanel4.add(botonCuadratico, new java.awt.GridBagConstraints());

        sliderCuadratico.setMaximum(255);
        sliderCuadratico.setToolTipText("Valor cuadratico");
        sliderCuadratico.setValue(128);
        sliderCuadratico.setPreferredSize(new java.awt.Dimension(100, 26));
        sliderCuadratico.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderCuadraticoStateChanged(evt);
            }
        });
        jPanel4.add(sliderCuadratico, new java.awt.GridBagConstraints());

        botonRojo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rojo.png"))); // NOI18N
        botonRojo.setToolTipText("Resaltado rojo");
        botonRojo.setPreferredSize(new java.awt.Dimension(35, 25));
        botonRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRojoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        jPanel4.add(botonRojo, gridBagConstraints);

        botonPixelPropio.setText("Cambio");
        botonPixelPropio.setToolTipText("Cambio de colores de píxeles");
        botonPixelPropio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPixelPropioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel4.add(botonPixelPropio, gridBagConstraints);

        botonSemiNegatividad.setText("Semi-negatividad");
        botonSemiNegatividad.setToolTipText("Operación seminegatividad");
        botonSemiNegatividad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSemiNegatividadActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        jPanel4.add(botonSemiNegatividad, gridBagConstraints);

        botonResaltadoSombras.setText("Resaltar sombras");
        botonResaltadoSombras.setToolTipText("Resaltado de sombras");
        botonResaltadoSombras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonResaltadoSombrasActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        jPanel4.add(botonResaltadoSombras, gridBagConstraints);

        sliderPosterizar.setMaximum(30);
        sliderPosterizar.setMinimum(2);
        sliderPosterizar.setToolTipText("Posterización");
        sliderPosterizar.setValue(0);
        sliderPosterizar.setMaximumSize(new java.awt.Dimension(100, 26));
        sliderPosterizar.setPreferredSize(new java.awt.Dimension(40, 25));
        sliderPosterizar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderPosterizarStateChanged(evt);
            }
        });
        sliderPosterizar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderPosterizarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderPosterizarFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        jPanel4.add(sliderPosterizar, gridBagConstraints);

        sliderRedOp.setMinimum(10);
        sliderRedOp.setToolTipText("Umbral resaltado del rojo");
        sliderRedOp.setValue(30);
        sliderRedOp.setPreferredSize(new java.awt.Dimension(50, 26));
        sliderRedOp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRedOpStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel4.add(sliderRedOp, gridBagConstraints);

        barraHerramientasAbajo.add(jPanel4);

        panelHerramientasAbajo.add(barraHerramientasAbajo, java.awt.BorderLayout.CENTER);

        panelAbajo.add(panelHerramientasAbajo, java.awt.BorderLayout.PAGE_START);

        leyenda.setText("Leyenda");
        panelAbajo.add(leyenda, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelAbajo, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2594, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 215, Short.MAX_VALUE)
        );

        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        menuArchivo.setText("Archivo");

        menuNuevo.setText("Nuevo");
        menuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(menuNuevo);

        menuAbrir.setText("Abrir");
        menuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(menuAbrir);

        menuGuardar.setText("Guardar");
        menuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(menuGuardar);

        barraMenu.add(menuArchivo);

        menuVer.setText("Ver");

        menuVerLeyenda.setText("Leyenda");
        menuVerLeyenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVerLeyendaActionPerformed(evt);
            }
        });
        menuVer.add(menuVerLeyenda);

        menuVerBarraArriba.setText("Barra de herramientas superior");
        menuVerBarraArriba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVerBarraArribaActionPerformed(evt);
            }
        });
        menuVer.add(menuVerBarraArriba);

        menuVerBarraAbajo.setText("Barra de herramientas inferior");
        menuVerBarraAbajo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVerBarraAbajoActionPerformed(evt);
            }
        });
        menuVer.add(menuVerBarraAbajo);

        barraMenu.add(menuVer);

        menuAyuda.setText("Ayuda");

        menuAcercaDe.setText("Acerca de");
        menuAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAcercaDeActionPerformed(evt);
            }
        });
        menuAyuda.add(menuAcercaDe);

        barraMenu.add(menuAyuda);

        setJMenuBar(barraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    private void menuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                if(isImagen(f)){
                    BufferedImage img = ImageIO.read(f);
                    VentanaInternaImagen vi = new VentanaInternaImagen();
                    vi.getLienzo2D().setImage(img);
                    this.escritorio.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                }else if(isSonido(f)){
                    f = new File(dlg.getSelectedFile().getAbsolutePath()) {
                        @Override
                        public String toString() {
                            return this.getName();
                        }
                    };
                    this.comboAudios.addItem(f);
                    this.comboAudios.setSelectedItem(f);
                }else if(isVideo(f)){
                    System.out.println("Es video");
                    VentanaInternaVideo vv = VentanaInternaVideo.getInstance(f);
                    escritorio.add(vv);
                    vv.setVisible(true);
                }               
            } catch (Exception ex) {
                System.err.println("Error al leer el archivo");
            }
        }
    }//GEN-LAST:event_menuAbrirActionPerformed

   
    private void menuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNuevoActionPerformed
        VentanaInternaImagen vi = new VentanaInternaImagen();
        escritorio.add(vi);
        vi.setTitle("Nueva");
        vi.setVisible(true);
        
        BufferedImage img;
        img = new BufferedImage(300, 300, BufferedImage.TYPE_INT_RGB);
        
        vi.getLienzo2D().setImage(img);
        
        vi.addInternalFrameListener(manejador);
    }//GEN-LAST:event_menuNuevoActionPerformed

    
    private void botonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPlayActionPerformed
        VentanaInternaVideo vc = (VentanaInternaVideo)escritorio.getSelectedFrame();
        if(vc != null){
            vc.play();
        }else{
            File f = (File) comboAudios.getSelectedItem();
        if (f != null) {
            player = new SMClipPlayer(f);
            if (player != null) {
                player.play();
            }
        }
        }
        
        
    }//GEN-LAST:event_botonPlayActionPerformed

    private void botonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonStopActionPerformed
        VentanaInternaVideo vv = (VentanaInternaVideo)escritorio.getSelectedFrame();
        if(vv != null){
            vv.stop();
        }else{
            if (player != null) {
                player.stop();
                player = null;
            }
            if (recorder != null) {
                recorder.stop();
                recorder = null;
            }
        }   
    }//GEN-LAST:event_botonStopActionPerformed

    private void botonGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGrabarActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                recorder = new SMSoundRecorder(f);
                if (recorder != null) {
                    recorder.record();
                    f = new File(dlg.getSelectedFile().getAbsolutePath()) {
                    @Override
                    public String toString() {
                        return this.getName();
                    }
                };
                    this.comboAudios.addItem(f);
                    this.comboAudios.setSelectedItem(f);
                }
            } catch (Exception ex) {
                System.err.println("Error al guardar el audio");
            }
        }
    }//GEN-LAST:event_botonGrabarActionPerformed

    private void botonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoActionPerformed
        int ancho = Integer.parseInt(JOptionPane.showInputDialog (this, "Ingrese el ancho de la imagen: ", "showInputDialog",JOptionPane.INFORMATION_MESSAGE));
        int alto = Integer.parseInt(JOptionPane.showInputDialog (this, "Ingrese el alto de la imagen: ", "showInputDialog",JOptionPane.INFORMATION_MESSAGE));
        VentanaInternaImagen vi = new VentanaInternaImagen();
        
        
        BufferedImage img;
        img = new BufferedImage(ancho, alto, BufferedImage.TYPE_INT_RGB);
        
        vi.getLienzo2D().setNuevoLienzo(img);
        vi.getLienzo2D().setArea(new Rectangle2D.Float(0, 0, img.getWidth(), img.getHeight()));
        vi.getLienzo2D().fijarLienzo();
        
        vi.addInternalFrameListener(manejador);
        escritorio.add(vi);
        vi.setTitle("Nueva");
        vi.setVisible(true);
    }//GEN-LAST:event_botonNuevoActionPerformed

    private void menuVerLeyendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVerLeyendaActionPerformed
        if(leyenda.isVisible())
            leyenda.setVisible(false);
        else
            leyenda.setVisible(true);
    }//GEN-LAST:event_menuVerLeyendaActionPerformed

    private void menuVerBarraArribaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVerBarraArribaActionPerformed
        if(panelArriba.isVisible())
            panelArriba.setVisible(false);
        else
            panelArriba.setVisible(true);
    }//GEN-LAST:event_menuVerBarraArribaActionPerformed

    private void menuVerBarraAbajoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVerBarraAbajoActionPerformed
        if(barraHerramientasAbajo.isVisible())
            barraHerramientasAbajo.setVisible(false);
        else
            barraHerramientasAbajo.setVisible(true);
    }//GEN-LAST:event_menuVerBarraAbajoActionPerformed

    private void menuAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAcercaDeActionPerformed
        JOptionPane.showMessageDialog(null, "Nombre del programa: Práctica final SMM\n"
                                            + "Versión: 1.0\nAutor: Germán Castilla López");
    }//GEN-LAST:event_menuAcercaDeActionPerformed

    private void botonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLineaActionPerformed
        forma = Formas.LINEA;
        cambiarForma(forma);
        leyenda.setText("Línea");
    }//GEN-LAST:event_botonLineaActionPerformed

    private void botonRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRectanguloActionPerformed
        forma = Formas.RECTANGULO;
        cambiarForma(forma);
        leyenda.setText("Rectángulo");
    }//GEN-LAST:event_botonRectanguloActionPerformed

    private void botonElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonElipseActionPerformed
        forma = Formas.ELIPSE;
        cambiarForma(forma);
        leyenda.setText("Elipse");
    }//GEN-LAST:event_botonElipseActionPerformed

    private void comboColoresTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboColoresTrazoActionPerformed
        if (comboColoresTrazo.getSelectedItem() == Color.black) {
            colorTrazo = Color.BLACK;
            cambiarColor(colorTrazo);
        } else if (comboColoresTrazo.getSelectedItem() == Color.white) {
            colorTrazo = Color.white;
            cambiarColor(colorTrazo);
        } else if (comboColoresTrazo.getSelectedItem() == Color.blue) {
            colorTrazo = Color.blue;
            cambiarColor(colorTrazo);
        } else if (comboColoresTrazo.getSelectedItem() == Color.yellow) {
            colorTrazo = Color.yellow;
            cambiarColor(colorTrazo);
        } else if (comboColoresTrazo.getSelectedItem() == Color.red) {
            colorTrazo = Color.red;
            cambiarColor(colorTrazo);
        } else if (comboColoresTrazo.getSelectedItem() == Color.green) {
            colorTrazo = Color.green;
            cambiarColor(colorTrazo);
        }

    }//GEN-LAST:event_comboColoresTrazoActionPerformed

    private void botonAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAlisarActionPerformed
        VentanaInternaImagen vi;
        vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
        if(!botonEditar.isSelected())
            vi.getLienzo2D().setAlisado(botonAlisar.isSelected());
        else
            vi.getLienzo2D().updateAlisado(botonAlisar.isSelected());
    }//GEN-LAST:event_botonAlisarActionPerformed

    private void botonGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_botonGrosorStateChanged
        VentanaInternaImagen vi;
        vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
        if(vi!=null){
            if(!botonEditar.isSelected())
                vi.getLienzo2D().setGrosor((int)botonGrosor.getValue());
            else
                vi.getLienzo2D().updateGrosor((int)botonGrosor.getValue());
        }
        
    }//GEN-LAST:event_botonGrosorStateChanged

    private void botonDiscontinuoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDiscontinuoActionPerformed
        VentanaInternaImagen vi;
        vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
        if(!botonEditar.isSelected())
            vi.getLienzo2D().setDiscontinuo(botonDiscontinuo.isSelected());
        else
           vi.getLienzo2D().updateDiscontinuo(botonDiscontinuo.isSelected()); 
    }//GEN-LAST:event_botonDiscontinuoActionPerformed

    private void botonRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRellenoActionPerformed
        VentanaInternaImagen vi;
        vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
        if(!botonEditar.isSelected())
            vi.getLienzo2D().setRelleno(botonRelleno.isSelected());
        else
            vi.getLienzo2D().updateRelleno(botonRelleno.isSelected());
    }//GEN-LAST:event_botonRellenoActionPerformed
        
    private VentanaInternaImagen viP;
        
    private void sliderTransparenciaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderTransparenciaStateChanged
        transparencia = (float)sliderTransparencia.getValue()/100;
        procesar();
        if(viP != null)
            viP.getLienzo2D().setTransparencia(transparencia);
    }//GEN-LAST:event_sliderTransparenciaStateChanged

    private void sliderTransparenciaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderTransparenciaFocusGained
        viP = (VentanaInternaImagen)escritorio.getSelectedFrame();
    }//GEN-LAST:event_sliderTransparenciaFocusGained

    private void sliderTransparenciaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderTransparenciaFocusLost
        viP = null;
        sliderTransparencia.setValue(100);
    }//GEN-LAST:event_sliderTransparenciaFocusLost

    private void sliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBrilloStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null  && imgFuente != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    int brillo = this.sliderBrillo.getValue();
                    RescaleOp rop = new RescaleOp(1.0F, brillo, null);
                    rop.filter(imgFuente, img);
                    escritorio.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderBrilloStateChanged

    private void sliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            procesar();
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderBrilloFocusGained

    private void sliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusLost
        imgFuente = null;
        sliderBrillo.setValue(0);
    }//GEN-LAST:event_sliderBrilloFocusLost

    private void botonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        FileNameExtensionFilter filtroImagenes = crearFiltroImagenes();
        FileNameExtensionFilter filtroSonidos = crearFiltroSonidos();
        FileNameExtensionFilter filtroVideos = crearFiltroVideos();
        dlg.setFileFilter(filtroImagenes);
        dlg.setFileFilter(filtroSonidos);
        dlg.setFileFilter(filtroVideos);
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                if(isImagen(f)){
                    BufferedImage img = ImageIO.read(f);
                    VentanaInternaImagen vi = new VentanaInternaImagen();
                    vi.getLienzo2D().setImage(img);
                    vi.getLienzo2D().setArea(new Rectangle2D.Float(0, 0, img.getWidth(), img.getHeight()));
                    this.escritorio.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                }else if(isSonido(f)){
                    f = new File(dlg.getSelectedFile().getAbsolutePath()) {
                        @Override
                        public String toString() {
                            return this.getName();
                        }
                    };
                    this.comboAudios.addItem(f);
                    this.comboAudios.setSelectedItem(f);
                }else if(isVideo(f)){                    
                    VentanaInternaVideo vv = VentanaInternaVideo.getInstance(f);
                    escritorio.add(vv);
                    vv.setTitle(f.getName());
                    vv.setVisible(true);
                }else{
                    JOptionPane.showMessageDialog(null, "Error al abrir el archivo: Formato desconocido");
                }               
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error al abrir el archivo");
            }
        }
    }//GEN-LAST:event_botonAbrirActionPerformed

    private void botonContrasteNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteNormalActionPerformed
        procesar();
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
        aplicarLookUp(tabla);
    }//GEN-LAST:event_botonContrasteNormalActionPerformed

    private void botonContrasteIluminadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteIluminadoActionPerformed
        procesar();
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);
        aplicarLookUp(tabla);
    }//GEN-LAST:event_botonContrasteIluminadoActionPerformed

    private void botonContrasteOscurecidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteOscurecidoActionPerformed
        procesar();
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
        aplicarLookUp(tabla);
    }//GEN-LAST:event_botonContrasteOscurecidoActionPerformed

    private void botonAumentarEscalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAumentarEscalaActionPerformed
        escalar(1.5);
    }//GEN-LAST:event_botonAumentarEscalaActionPerformed

    private void botonDisminuirEscalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDisminuirEscalaActionPerformed
        escalar(0.5);
    }//GEN-LAST:event_botonDisminuirEscalaActionPerformed

    private void botonSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSepiaActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            procesar();
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    SepiaOp sepia = new SepiaOp();
                    sepia.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonSepiaActionPerformed

    private void comboMascaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboMascaraActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            procesar();
            BufferedImage img = vi.getLienzo2D().getImage();

            int seleccion = this.comboMascara.getSelectedIndex();

            Kernel k = getKernel(seleccion);

            if (img != null && k!=null) {
                try {
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_comboMascaraActionPerformed

    private void botonEcualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEcualizarActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            procesar();
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    EqualizationOp ecualizacion = new EqualizationOp();
                    ecualizacion.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonEcualizarActionPerformed

    private void sliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacionStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if(vi!=null){
            if (imgFuente != null) {
                try {
                    AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(sliderRotacion.getValue()),imgFuente.getWidth()/2,imgFuente.getHeight()/2);
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgFuente, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderRotacionStateChanged

    private void sliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if(vi!=null){
            imgFuente = vi.getLienzo2D().getImage();
            if (imgFuente != null) {
                try {
                    AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(sliderRotacion.getValue()),imgFuente.getWidth()/2,imgFuente.getHeight()/2);
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgFuente, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderRotacionFocusGained

    private void sliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusLost
        imgFuente = null;
        sliderRotacion.setValue(0);
    }//GEN-LAST:event_sliderRotacionFocusLost

    private void boton90GradosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton90GradosActionPerformed
        rotar(90);
    }//GEN-LAST:event_boton90GradosActionPerformed

    private void boton180GradosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton180GradosActionPerformed
        rotar(180);
    }//GEN-LAST:event_boton180GradosActionPerformed

    private void boton270GradosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton270GradosActionPerformed
        rotar(270);
    }//GEN-LAST:event_boton270GradosActionPerformed

    private void comboColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboColorActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        String espacio = "";
        if (vi != null) {
            procesar();
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                ColorSpace cs = null;
                int seleccion = this.comboColor.getSelectedIndex();
                switch (seleccion){
                    case 0:
                    cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                    espacio = "sRGB";
                    break;
                    case 1:
                    cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                    espacio = "PYCC";
                    break;
                    case 2:
                    cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    espacio = "Gris";
                    break;
                }

                try {
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = op.filter(img, null);
                    VentanaInternaImagen vi2 = new VentanaInternaImagen();
                    vi2.getLienzo2D().setImage(imgdest);
                    vi2.setTitle(vi.getTitle() + " {" + espacio + "}");
                    escritorio.add(vi2);
                    vi2.setVisible(true);
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_comboColorActionPerformed

    private void botonBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBandasActionPerformed
        VentanaInternaImagen vi1 = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi1 != null) {
            procesar();
            BufferedImage img = vi1.getLienzo2D().getImage();
            if (img != null) {
                for(int i = 0; i<img.getRaster().getNumBands(); i++){
                    BufferedImage imgBanda = getImageBand(img, i);
                    VentanaInternaImagen vi = new VentanaInternaImagen();
                    vi.getLienzo2D().setImage(imgBanda);
                    vi.setTitle(vi1.getTitle() + " {Banda: " + (i+1) + "}");
                    escritorio.add(vi);
                    vi.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_botonBandasActionPerformed

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage(true);
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                FileNameExtensionFilter filtroImagenes = crearFiltroImagenes();
                FileNameExtensionFilter filtroSonidos = crearFiltroSonidos();
                FileNameExtensionFilter filtroVideos = crearFiltroVideos();
                dlg.addChoosableFileFilter(filtroImagenes);
                dlg.setFileFilter(filtroImagenes);
                dlg.setFileFilter(filtroSonidos);
                dlg.setFileFilter(filtroVideos);
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    } catch (Exception ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_botonGuardarActionPerformed

    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage(true);
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    } catch (Exception ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_menuGuardarActionPerformed

    private void botonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarActionPerformed
        VentanaInternaImagen vi;
        vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
        vi.getLienzo2D().setEditar(botonEditar.isSelected());
    }//GEN-LAST:event_botonEditarActionPerformed

    private void botonCamaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCamaraActionPerformed
        VentanaInternaCamara vc = VentanaInternaCamara.getInstance((Webcam)comboCamaras.getSelectedItem(),comboResoluciones.getSelectedIndex());
        if(vc != null){
            escritorio.add(vc);
            vc.setVisible(true);
        }
    }//GEN-LAST:event_botonCamaraActionPerformed

    private void botonCapturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCapturarActionPerformed
        VentanaInternaSM v = (VentanaInternaSM)escritorio.getSelectedFrame();
        if(v instanceof VentanaInternaCamara){
            BufferedImage img = v.getImage();
            VentanaInternaImagen vi = new VentanaInternaImagen();
            vi.getLienzo2D().setImage(img);
            escritorio.add(vi);
            vi.setTitle("Captura");
            vi.setVisible(true);
        }else if(v instanceof VentanaInternaVideo){
            BufferedImage img = v.getImage();
            VentanaInternaImagen vi = new VentanaInternaImagen();
            vi.getLienzo2D().setImage(img);
            escritorio.add(vi);
            vi.setTitle("Captura");
            vi.setVisible(true);
        }
    }//GEN-LAST:event_botonCapturarActionPerformed

    private void botonDuplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDuplicarActionPerformed
        VentanaInternaImagen vi;
        vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
        BufferedImage img = vi.getLienzo2D().getImage(true);
        ColorModel cm = img.getColorModel();
        boolean isRasterPremultiplied = cm.isAlphaPremultiplied();
        WritableRaster raster = img.copyData(null);
        BufferedImage imgFinal = new BufferedImage(cm, raster, isRasterPremultiplied, null);
        VentanaInternaImagen vi2 = new VentanaInternaImagen();
        vi2.getLienzo2D().setImage(imgFinal);
        escritorio.add(vi2);
        vi2.setTitle("Copia de: " + vi.getTitle());
        vi2.setVisible(true);
    }//GEN-LAST:event_botonDuplicarActionPerformed

    private void botonTintarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTintarActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            procesar();
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    TintOp tint = new TintOp(vi.getLienzo2D().getColor(), tintado);
                    tint.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonTintarActionPerformed

    private void sliderTintadoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderTintadoStateChanged
        tintado = (float)sliderTintado.getValue()/100;
    }//GEN-LAST:event_sliderTintadoStateChanged

    private void botonNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNegativoActionPerformed
        procesar();
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
        aplicarLookUp(tabla);
    }//GEN-LAST:event_botonNegativoActionPerformed

    private void botonCuadraticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCuadraticoActionPerformed
        procesar();
        LookupTable tabla = cuadratica(valorCuadratico);
        aplicarLookUp(tabla);
    }//GEN-LAST:event_botonCuadraticoActionPerformed

    private void botonProcesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonProcesarActionPerformed
        procesamiento = botonProcesar.isSelected();
    }//GEN-LAST:event_botonProcesarActionPerformed

    private void comboCamarasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCamarasActionPerformed
        camara = (Webcam)comboCamaras.getSelectedItem();
    }//GEN-LAST:event_comboCamarasActionPerformed

    private void comboColoresRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboColoresRellenoActionPerformed
        if (comboColoresRelleno.getSelectedItem() == Color.black) {
            colorRelleno = Color.BLACK;
            cambiarColorRelleno(colorRelleno);
        } else if (comboColoresRelleno.getSelectedItem() == Color.white) {
            colorRelleno = Color.white;
            cambiarColorRelleno(colorRelleno);
        } else if (comboColoresRelleno.getSelectedItem() == Color.blue) {
            colorRelleno = Color.blue;
            cambiarColorRelleno(colorRelleno);
        } else if (comboColoresRelleno.getSelectedItem() == Color.yellow) {
            colorRelleno = Color.yellow;
            cambiarColorRelleno(colorRelleno);
        } else if (comboColoresRelleno.getSelectedItem() == Color.red) {
            colorRelleno = Color.red;
            cambiarColorRelleno(colorRelleno);
        } else if (comboColoresRelleno.getSelectedItem() == Color.green) {
            colorRelleno = Color.green;
            cambiarColorRelleno(colorRelleno);
        }
    }//GEN-LAST:event_comboColoresRellenoActionPerformed

    private void botonDialogoColorTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDialogoColorTrazoActionPerformed
        colorTrazo = JColorChooser.showDialog(this, "Color del trazo", Color.BLACK);
        cambiarColor(colorTrazo);
    }//GEN-LAST:event_botonDialogoColorTrazoActionPerformed

    private void botonDialogoColorRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDialogoColorRellenoActionPerformed
        colorRelleno = JColorChooser.showDialog(this, "Color del relleno", Color.BLACK);
        cambiarColorRelleno(colorRelleno);
    }//GEN-LAST:event_botonDialogoColorRellenoActionPerformed

    private void botonDegradadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDegradadoActionPerformed
        VentanaInternaImagen vi;
        vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
        if(vi!=null){
            if(!botonEditar.isSelected())
                vi.getLienzo2D().setDegradado(botonDegradado.isSelected());
            else
                vi.getLienzo2D().updateDegradado(botonDegradado.isSelected());
        }
    }//GEN-LAST:event_botonDegradadoActionPerformed

    private void botonDegradadoHorizontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDegradadoHorizontalActionPerformed
        VentanaInternaImagen vi;
        vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
        if(vi!=null){
            if(!botonEditar.isSelected())
                vi.getLienzo2D().setDegradadoHorizontal(botonDegradadoHorizontal.isSelected());
            else
                vi.getLienzo2D().updateDegradadoHorizontal(botonDegradadoHorizontal.isSelected());
        }
    }//GEN-LAST:event_botonDegradadoHorizontalActionPerformed

    private void sliderPosterizarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderPosterizarStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            
            if (imgAux != null) {
                try {
                    PosterizarOp op = new PosterizarOp(sliderPosterizar.getValue());
                    BufferedImage imgDest = op.filter(imgAux, null);
                    vi.getLienzo2D().setImage(imgDest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderPosterizarStateChanged
    private BufferedImage imgAux;
    private void sliderPosterizarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderPosterizarFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgAux = vi.getLienzo2D().getImage();
        }
    }//GEN-LAST:event_sliderPosterizarFocusGained

    private void sliderPosterizarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderPosterizarFocusLost
        imgAux = null;
        sliderPosterizar.setValue(2);
    }//GEN-LAST:event_sliderPosterizarFocusLost

    private void botonRectanguloRedondeadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRectanguloRedondeadoActionPerformed
        forma = Formas.RECTANGULO_REDONDEADO;
        cambiarForma(forma);
        leyenda.setText("Rectángulo redondeado");
    }//GEN-LAST:event_botonRectanguloRedondeadoActionPerformed

    private void botonRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRojoActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    procesar();
                    RedOp op = new RedOp(umbralRedOp);
                    op.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonRojoActionPerformed

    private void botonPixelPropioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPixelPropioActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    FuncionPropia op = new FuncionPropia();
                    op.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonPixelPropioActionPerformed

    private void botonResaltadoSombrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonResaltadoSombrasActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    procesar();
                    int umbral = Integer.parseInt(JOptionPane.showInputDialog (this, "Ingrese el umbral de oscuros: ", "showInputDialog",JOptionPane.INFORMATION_MESSAGE));
                    ResaltadoSombrasOp op = new ResaltadoSombrasOp(umbral);
                    op.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonResaltadoSombrasActionPerformed

    private void sliderCuadraticoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderCuadraticoStateChanged
        valorCuadratico = sliderCuadratico.getValue();
    }//GEN-LAST:event_sliderCuadraticoStateChanged

    private void botonSemiNegatividadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSemiNegatividadActionPerformed
        procesar();
        int umbral = Integer.parseInt(JOptionPane.showInputDialog (this, "Ingrese el umbral apartir del cual aplicar la operación: ", 
                                                                                    "showInputDialog",JOptionPane.INFORMATION_MESSAGE));
        LookupTable tabla = negativoBrillo(umbral);
        aplicarLookUp(tabla);
    }//GEN-LAST:event_botonSemiNegatividadActionPerformed

    private void sliderRedOpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRedOpStateChanged
        umbralRedOp = sliderRedOp.getValue();
    }//GEN-LAST:event_sliderRedOpStateChanged

    private void botonCombinarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCombinarActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    float[][] matriz = {{0.0F, 0.0F, 0.0F},
                                        {0.0F, 1.0F, 0.0F},
                                        {0.0F, 0.0F, 0.7F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonCombinarActionPerformed

    private void botonDegradadoEsquinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDegradadoEsquinaActionPerformed
        VentanaInternaImagen vi;
        vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
        if(vi!=null){
            if(!botonEditar.isSelected())
                vi.getLienzo2D().setDegradadoEsquina(botonDegradadoEsquina.isSelected());
            else
                vi.getLienzo2D().updateDegradadoEsquina(botonDegradadoEsquina.isSelected());
        }
    }//GEN-LAST:event_botonDegradadoEsquinaActionPerformed

    /**
     * Clase que crea el manejador para el cambio de los atributos de los botones de la ventana
     */
    private class ManejadorVentanaInterna extends InternalFrameAdapter{

        @Override
        public void internalFrameActivated(InternalFrameEvent evt) {
            VentanaInternaImagen vi = (VentanaInternaImagen) evt.getInternalFrame();
            if(vi != null){
                if (!botonEditar.isSelected()) {
                    botonGrosor.setValue(vi.getLienzo2D().getGrosor());
                    botonRelleno.setSelected(vi.getLienzo2D().isRelleno());
                    botonAlisar.setSelected(vi.getLienzo2D().isAlisado());
                    botonEditar.setSelected(vi.getLienzo2D().isEditar());
                    comboColoresTrazo.setSelectedItem(vi.getLienzo2D().getColor());
                    comboColoresRelleno.setSelectedItem(vi.getLienzo2D().getColorRelleno());

                    Formas form = vi.getLienzo2D().getForma();
                    if (form != null) {
                        switch (form) {
                            case LINEA:
                                botonLinea.setSelected(true);
                                botonRectangulo.setSelected(false);
                                botonRectanguloRedondeado.setSelected(false);
                                botonElipse.setSelected(false);
                                break;
                            case RECTANGULO:
                                botonRectangulo.setSelected(true);
                                botonRectanguloRedondeado.setSelected(false);
                                botonLinea.setSelected(false);
                                botonElipse.setSelected(false);
                                break;
                            case RECTANGULO_REDONDEADO:
                                botonRectangulo.setSelected(false);
                                botonRectanguloRedondeado.setSelected(true);
                                botonLinea.setSelected(false);
                                botonElipse.setSelected(false);
                                break;
                            case ELIPSE:
                                botonElipse.setSelected(true);
                                botonRectanguloRedondeado.setSelected(false);
                                botonLinea.setSelected(false);
                                botonRectangulo.setSelected(false);
                                break;
                        }
                        leyenda.setText(vi.getLienzo2D().getForma().toString());
                }
                
                }else{
                    botonAlisar.setSelected(false);
                    botonLinea.setSelected(false);
                    botonRectangulo.setSelected(false);
                    botonRectanguloRedondeado.setSelected(false);
                    botonElipse.setSelected(false);
                    leyenda.setText("Leyenda");
                    botonRelleno.setSelected(vi.getLienzo2D().getFigura().isRelleno());
                    botonAlisar.setSelected(vi.getLienzo2D().getFigura().isAlisado());
                }



            }else{
                botonGrosor.setValue(false);
                botonRelleno.setSelected(false);
                botonAlisar.setSelected(false);
                botonEditar.setSelected(false);
                comboColoresTrazo.setSelectedIndex(0);
                comboColoresRelleno.setSelectedIndex(0);
                botonLinea.setSelected(false);
                botonRectangulo.setSelected(false);
                botonRectanguloRedondeado.setSelected(false);
                botonElipse.setSelected(false);
                leyenda.setText("Leyenda");
            }
        }
            
        
    }
  
    private void cambiarForma(Formas f){
        VentanaInternaImagen vi;
        vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
        vi.getLienzo2D().setForma(f);
    }
    
    private void cambiarColor(Color c){
        VentanaInternaImagen vi;
        vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
        if(!botonEditar.isSelected())
            vi.getLienzo2D().setColor(c);
        else
            vi.getLienzo2D().updateColor(c);
    }
    
    private void cambiarColorRelleno(Color c){
        VentanaInternaImagen vi;
        vi = (VentanaInternaImagen)escritorio.getSelectedFrame();
        if(!botonEditar.isSelected())
            vi.getLienzo2D().setColorRelleno(c);
        else
            vi.getLienzo2D().updateColorRelleno(c);
    }
    
    /**
     * Método que comprueba si un fichero es una imagen por su extensión
     * @param f Fichero a estudiar
     * @return True si f es una imagen
     */
    private boolean isImagen(File f){
        boolean res = false;
        String extensiones[] = ImageIO.getReaderFileSuffixes();
        
        for(int i=0; i < extensiones.length && res == false; i++){
            if(f.getName().endsWith(extensiones[i])){
                res = true;
            }
        }
        
        return res;
    }
    
    /**
     * Método que comprueba si un fichero es un fichero de sonido por su extensión
     * @param f Fichero a estudiar
     * @return True si f es un fichero de sonido
     */
    private boolean isSonido(File f){
        boolean res = false;
        AudioFileFormat.Type[] extensiones = AudioSystem.getAudioFileTypes();
        
        
        for(int i=0; i < extensiones.length && res == false; i++){
            if(f.getName().endsWith(extensiones[i].getExtension())){
                res = true;
            }
        }
        
        return res;
    }
    
    /**
     * Método que comprueba si un fichero es un fichero de vídeo por su extensión
     * @param f Fichero a estudiar
     * @return True si f es un fichero de vídeo
     */
    private boolean isVideo(File f){
        boolean res = false;
        String extensiones[] = {".asf", ".avi", ".flv", ".wav", ".mpjpeg", ".flac", ".mov", "mpg", "mp4"};
        
        for(int i=0; i < extensiones.length && res == false; i++){
            if(f.getName().endsWith(extensiones[i])){
                res = true;
            }
        }
        
        return res;
    }
    
    /**
     * Método que crea el filtro para imagenes para el diálogo abrir
     * @return El filtro para imagenes para el diálogo abrir
     */
    private FileNameExtensionFilter crearFiltroImagenes(){
        String extensiones[] = ImageIO.getReaderFileSuffixes();
        return new FileNameExtensionFilter("Imagenes", extensiones);
    }
    
    /**
     * Método que crea el filtro para sonidos para el diálogo abrir
     * @return El filtro para sonidos para el diálogo abrir
     */
    private FileNameExtensionFilter crearFiltroSonidos(){
        AudioFileFormat.Type[] extensiones = AudioSystem.getAudioFileTypes();
        String ext[] = new String[extensiones.length];
        
        for(int i=0; i < extensiones.length; i++){
            ext[i] = extensiones[i].getExtension();
        }
        
        return new FileNameExtensionFilter("Sonidos", ext);
    }
    
    /**
     * Método que crea el filtro para vídeos para el diálogo abrir
     * @return El filtro para vídeos para el diálogo abrir
     */
    private FileNameExtensionFilter crearFiltroVideos(){
        String extensiones[] = {"asf", "avi", "flv", "wav", "mpjpeg", "flac", "mov", "mpg", "mp4"};
        return new FileNameExtensionFilter("Videos", extensiones);
    }
    
    /**
     * Método usado para aplicar una operación LookUp sobre la imagen del lienzo
     * @param tabla Objeto de la clase LookUpTable con los atributos de la operación
     */
    private void aplicarLookUp(LookupTable tabla){
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }
    
    private ByteLookupTable negativoBrillo(int m){
        byte lt[] = new byte[256];
        
        for(int i = 0; i < m; i++){
            lt[i] = (byte)((float)i-50);
            if(lt[i] < 0)
                lt[i] = (byte)0.0f;
        }
        
        for(int i = m; i < lt.length; i++){
            lt[i] = (byte)((float)255-i-50);
            if(lt[i] < 0)
                lt[i] = (byte)0.0f;
        }
        
        
        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt; 
    }
    
    /**
     * Método usado para cambiar el escalado de la imagen del lienzo
     * @param m Double que cambia el escalado
     */
    private void escalar(double m){
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(m, m);                                   
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }
    
    private Kernel getKernel(int seleccion){
        Kernel k = null;
            switch(seleccion){
                case 0:
                    k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                    break;
                case 1:
                    k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                    break;
                case 2:
                    k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                    break;
                case 3:
                    k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                    break;
                case 4:
                    k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                    break;
                
            }
        return k;
    }
    
    /**
     * Método usado para rotar la imagen del lienzo
     * @param grados Double con los grados a rotar
     */
    private void rotar(double grados){
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
        if (vi != null) {
            imgFuente = vi.getLienzo2D().getImage();
            if (imgFuente != null) {
                try {
                    AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(grados),imgFuente.getWidth()/2,imgFuente.getHeight()/2);
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgFuente, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }
    
    private BufferedImage getImageBand(BufferedImage img, int banda) {
        ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
        ComponentColorModel cm = new ComponentColorModel(cs, false, false, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);
        int vband[] = {banda};
        WritableRaster bRaster = (WritableRaster) img.getRaster().createWritableChild(0, 0, img.getWidth(), img.getHeight(), 0, 0, vband);
        return new BufferedImage(cm, bRaster, false, null);
    }
    
    /**
     * Método que crea la tabla LookUp para la operación cuadrática
     * @param m Umbral que indica donde la función se hace 0
     * @return La tabla LookUp de la operación cuadrática
     */
    public LookupTable cuadratica(double m) {
        double Max;
        if(m >= 128)
            Max = 0.01*Math.pow(0-m, 2);
        else
            Max = 0.01*Math.pow(255-m, 2);
        
        double K = 255/Max;
        byte lt[] = new byte[256];
        for (int l = 0; l < 256; l++) {
            lt[l] = (byte) (K * (0.01*Math.pow(l-m, 2)));
        }
        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt; 
    }
    
    private void procesar(){
        if(procesamiento){
            VentanaInternaImagen vi = (VentanaInternaImagen) (escritorio.getSelectedFrame());
            if(vi!=null)
                vi.getLienzo2D().seProcesa();
        }    
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar barraHerramientasAbajo;
    private javax.swing.JToolBar barraHerramientasArriba;
    private javax.swing.JToolBar barraHerramientasSV;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton boton180Grados;
    private javax.swing.JButton boton270Grados;
    private javax.swing.JButton boton90Grados;
    private javax.swing.JButton botonAbrir;
    private javax.swing.JToggleButton botonAlisar;
    private javax.swing.JButton botonAumentarEscala;
    private javax.swing.JButton botonBandas;
    private javax.swing.JButton botonCamara;
    private javax.swing.JButton botonCapturar;
    private javax.swing.JButton botonCombinar;
    private javax.swing.JButton botonContrasteIluminado;
    private javax.swing.JButton botonContrasteNormal;
    private javax.swing.JButton botonContrasteOscurecido;
    private javax.swing.JButton botonCuadratico;
    private javax.swing.JToggleButton botonDegradado;
    private javax.swing.JToggleButton botonDegradadoEsquina;
    private javax.swing.JToggleButton botonDegradadoHorizontal;
    private javax.swing.JButton botonDialogoColorRelleno;
    private javax.swing.JButton botonDialogoColorTrazo;
    private javax.swing.JCheckBox botonDiscontinuo;
    private javax.swing.JButton botonDisminuirEscala;
    private javax.swing.JButton botonDuplicar;
    private javax.swing.JButton botonEcualizar;
    private javax.swing.JToggleButton botonEditar;
    private javax.swing.JToggleButton botonElipse;
    private javax.swing.JButton botonGrabar;
    private javax.swing.JSpinner botonGrosor;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JToggleButton botonLinea;
    private javax.swing.JButton botonNegativo;
    private javax.swing.JButton botonNuevo;
    private javax.swing.JButton botonPixelPropio;
    private javax.swing.JButton botonPlay;
    private javax.swing.JToggleButton botonProcesar;
    private javax.swing.JToggleButton botonRectangulo;
    private javax.swing.JToggleButton botonRectanguloRedondeado;
    private javax.swing.JToggleButton botonRelleno;
    private javax.swing.JButton botonResaltadoSombras;
    private javax.swing.JButton botonRojo;
    private javax.swing.JButton botonSemiNegatividad;
    private javax.swing.JButton botonSepia;
    private javax.swing.JButton botonStop;
    private javax.swing.JButton botonTintar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<File> comboAudios;
    private javax.swing.JComboBox<Webcam> comboCamaras;
    private javax.swing.JComboBox<String> comboColor;
    private javax.swing.JComboBox<Color> comboColoresRelleno;
    private javax.swing.JComboBox<Color> comboColoresTrazo;
    private javax.swing.JComboBox<String> comboMascara;
    private javax.swing.JComboBox<String> comboResoluciones;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel leyenda;
    private javax.swing.JMenuItem menuAbrir;
    private javax.swing.JMenuItem menuAcercaDe;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JMenuItem menuNuevo;
    private javax.swing.JMenu menuVer;
    private javax.swing.JMenuItem menuVerBarraAbajo;
    private javax.swing.JMenuItem menuVerBarraArriba;
    private javax.swing.JMenuItem menuVerLeyenda;
    private javax.swing.JPanel panelAbajo;
    private javax.swing.JPanel panelArriba;
    private javax.swing.JPanel panelBotones;
    private javax.swing.JPanel panelColor;
    private javax.swing.JPanel panelContraste;
    private javax.swing.JPanel panelEscala;
    private javax.swing.JPanel panelFiltros;
    private javax.swing.JPanel panelHerramientasAbajo;
    private javax.swing.JPanel panelRotar;
    private javax.swing.JPanel panelTintado;
    private javax.swing.JSlider sliderBrillo;
    private javax.swing.JSlider sliderCuadratico;
    private javax.swing.JSlider sliderPosterizar;
    private javax.swing.JSlider sliderRedOp;
    private javax.swing.JSlider sliderRotacion;
    private javax.swing.JSlider sliderTintado;
    private javax.swing.JSlider sliderTransparencia;
    // End of variables declaration//GEN-END:variables
}
